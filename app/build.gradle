plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    // Hilt
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'

    id 'kotlin-android'
    id 'kotlin-parcelize'
    // google services
    id 'com.google.gms.google-services'
//    Nav fragment args
    id 'androidx.navigation.safeargs'
//    ProtoBuf
    id "com.google.protobuf" version "0.8.17"

}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.sudoajay.namaz_alert"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        jvmTarget = '1.8'
    }


    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }


    buildFeatures {
        // Determines whether to support View Binding.
        // Note that the viewBinding.enabled property is now deprecated.
//        viewBinding = true
        // Determines whether to support Data Binding.
        // Note that the dataBinding.enabled property is now deprecated.
        dataBinding = true

    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

// SwipeRefreshLayout
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:$SwipeRefreshLayout")

//    DependencyInjection
    implementation("com.google.dagger:hilt-android:$Dagger_Hilt")
    kapt("com.google.dagger:hilt-compiler:$Dagger_Hilt")
    implementation("androidx.hilt:hilt-lifecycle-viewmodel:$Android_Hilt")
    kapt("androidx.hilt:hilt-compiler:$Android_Hilt")

//    Navigation
    implementation("androidx.navigation:navigation-fragment-ktx:$NavVersion")
    implementation("androidx.navigation:navigation-ui-ktx:$NavVersion")

    //   Coroutine
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$Coroutine")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$Coroutine")

    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$Lifecycle")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$Lifecycle")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$Lifecycle")

//    Networking
    implementation("com.squareup.retrofit2:retrofit:$Retrofit")
    implementation("com.squareup.retrofit2:converter-gson:$Retrofit")
    implementation("com.squareup.okhttp3:logging-interceptor:$Okhttp")
    implementation("com.squareup.okhttp3:okhttp:$Okhttp")
    implementation("com.google.code.gson:gson:2.8.9")

//    Database
    implementation("androidx.room:room-runtime:$Room")
    kapt("androidx.room:room-compiler:$Room")
    implementation("androidx.room:room-ktx:$Room")
    implementation("androidx.room:room-paging:$Room")
    implementation("androidx.paging:paging-runtime-ktx:$Paging")


//    Firebase
    implementation platform('com.google.firebase:firebase-bom:29.3.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'

//    Setting
    implementation 'androidx.preference:preference-ktx:1.2.0'

//    Proto Data store
    implementation("androidx.datastore:datastore-preferences:$PreferencesDataStore")
    implementation("androidx.datastore:datastore-core:$ProtoDataStore")
    implementation("com.google.protobuf:protobuf-javalite:$Protobuf")

    // WorkManager dependency
    implementation "androidx.work:work-runtime-ktx:$WorkManger"



//    External library
//    implementation 'com.airbnb.android:lottie:5.0.3'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
